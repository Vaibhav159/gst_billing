version: 2.1

jobs:
  build-and-test:
    docker:
      - image: cimg/python:3.10
        environment:
          DJANGO_SETTINGS_MODULE: gst_billing.ci_settings
          DATABASE_URL: postgresql://circleci:circleci@localhost/circle_test
      - image: cimg/postgres:13.7
        environment:
          POSTGRES_USER: circleci
          POSTGRES_PASSWORD: circleci
          POSTGRES_DB: circle_test

    steps:
      - checkout

      - restore_cache:
          name: Restore cached venv
          keys:
            - v1-venv-{{ checksum "requirements.txt" }}
            - v1-venv-

      - run:
          name: Install system dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y postgresql-client

      - run:
          name: Setup virtual environment and install dependencies
          command: |
            python -m venv .venv
            . .venv/bin/activate
            python -m pip install --upgrade uv
            uv pip install -r requirements.txt
            uv pip install pytest pytest-django pytest-cov coverage

      - save_cache:
          name: Save cached venv
          paths:
            - ".venv/"
          key: v1-venv-{{ checksum "requirements.txt" }}

      - run:
          name: Check Python environment
          command: |
            . .venv/bin/activate
            python --version
            uv pip freeze

      - run:
          name: Wait for PostgreSQL
          command: |
            # Simple wait for PostgreSQL to be ready
            for i in {1..30}; do
              pg_isready -h localhost -p 5432 && echo "PostgreSQL is ready!" && break
              echo "Waiting for PostgreSQL to be ready... ($i/30)"
              sleep 1
            done

      - run:
          name: Check PostgreSQL connection
          command: |
            PGPASSWORD=circleci psql -h localhost -p 5432 -U circleci -d circle_test -c "SELECT 1;"

      - run:
          name: Check Django project
          command: |
            . .venv/bin/activate
            python manage.py check

      - run:
          name: Run migrations
          command: |
            . .venv/bin/activate
            python manage.py migrate

      # Test directory is created in the test run step

      - run:
          name: Run Django tests
          command: |
            . .venv/bin/activate
            mkdir -p test-results/pytest
            python -m pytest billing/tests/ --junitxml=test-results/pytest/junit.xml -v

      - store_test_results:
          path: test-results/pytest

      - store_artifacts:
          path: test-results/pytest
          destination: test-reports

workflows:
  version: 2
  build-test:
    jobs:
      - build-and-test
